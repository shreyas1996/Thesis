// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"

open FSharp.Text.Parsing
open AST

// Auxiliary function to compute the position an AST node
let pos (parseState: IParseState, inputIdx: int): AST.Position =
  let mainPos = parseState.InputStartPosition inputIdx
  let (rstart, rend) = parseState.ResultRange
  { FileName = mainPos.FileName
    Line = mainPos.pos_lnum + 1 // Line numbering from 1
    Col = mainPos.pos_cnum - mainPos.pos_bol + 1 // Line numbering from 1
    LineStart = rstart.pos_lnum + 1 // Row numbering from 1
    ColStart = rstart.pos_cnum - rstart.pos_bol + 1 // Column numbering from 1
    LineEnd = rend.pos_lnum + 1
    ColEnd = rend.pos_cnum - rend.pos_bol } // No +1: cover last-used character

// Auxiliary function to build an Abstract Syntax Tree node for a Hygge pretype.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkPretypeNode (parseState: IParseState, inputIdx: int, t: Pretype): PretypeNode =
  { Pos = pos(parseState, inputIdx); Pretype = t }

// Auxiliary function to build an untyped AST node for a Hygge expression.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkNode (parseState: IParseState, inputIdx: int, e: UntypedExpr): UntypedAST =
  { Pos = pos(parseState, inputIdx); Env = (); Type = (); Expr = e }

// let mkSimpleType name pos = TSimple(name, pos)
// let mkSetType baseType pos = TSet(baseType, pos)

# 38 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | GT
  | LT
  | SET
  | MINUS
  | RARROW
  | IS
  | UNION
  | PRODUCT
  | SEMICOLON
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | EOF
  | SCHEME
  | CLASS
  | TYPE
  | VALUE
  | TEST_CASE
  | END
  | COLON
  | EQUALS
  | IDENT of (string)
  | STRING_LITERAL of (string)
  | LIT_UNIT of (unit)
  | LIT_FLOAT of (single)
  | LIT_INT of (int)
  | LIT_BOOL of (bool)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_SET
    | TOKEN_MINUS
    | TOKEN_RARROW
    | TOKEN_IS
    | TOKEN_UNION
    | TOKEN_PRODUCT
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EOF
    | TOKEN_SCHEME
    | TOKEN_CLASS
    | TOKEN_TYPE
    | TOKEN_VALUE
    | TOKEN_TEST_CASE
    | TOKEN_END
    | TOKEN_COLON
    | TOKEN_EQUALS
    | TOKEN_IDENT
    | TOKEN_STRING_LITERAL
    | TOKEN_LIT_UNIT
    | TOKEN_LIT_FLOAT
    | TOKEN_LIT_INT
    | TOKEN_LIT_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_scheme
    | NONTERM_classes
    | NONTERM_classDef
    | NONTERM_typeDefs
    | NONTERM_typeDefList
    | NONTERM_typeDef
    | NONTERM_valueDefs
    | NONTERM_valueDefList
    | NONTERM_valueDef
    | NONTERM_simpleExpr
    | NONTERM_setExprs
    | NONTERM_setExpr
    | NONTERM_bodyExpr
    | NONTERM_parenExprCommaSeq
    | NONTERM_exprCommaSeq
    | NONTERM_parenArgProductSeq
    | NONTERM_argTypesSeq
    | NONTERM_functionExpr
    | NONTERM_primary
    | NONTERM_variable
    | NONTERM_value
    | NONTERM_ident
    | NONTERM_pretype

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | GT  -> 0 
  | LT  -> 1 
  | SET  -> 2 
  | MINUS  -> 3 
  | RARROW  -> 4 
  | IS  -> 5 
  | UNION  -> 6 
  | PRODUCT  -> 7 
  | SEMICOLON  -> 8 
  | COMMA  -> 9 
  | LPAREN  -> 10 
  | RPAREN  -> 11 
  | LBRACK  -> 12 
  | RBRACK  -> 13 
  | LCURLY  -> 14 
  | RCURLY  -> 15 
  | EOF  -> 16 
  | SCHEME  -> 17 
  | CLASS  -> 18 
  | TYPE  -> 19 
  | VALUE  -> 20 
  | TEST_CASE  -> 21 
  | END  -> 22 
  | COLON  -> 23 
  | EQUALS  -> 24 
  | IDENT _ -> 25 
  | STRING_LITERAL _ -> 26 
  | LIT_UNIT _ -> 27 
  | LIT_FLOAT _ -> 28 
  | LIT_INT _ -> 29 
  | LIT_BOOL _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_GT 
  | 1 -> TOKEN_LT 
  | 2 -> TOKEN_SET 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_RARROW 
  | 5 -> TOKEN_IS 
  | 6 -> TOKEN_UNION 
  | 7 -> TOKEN_PRODUCT 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_LPAREN 
  | 11 -> TOKEN_RPAREN 
  | 12 -> TOKEN_LBRACK 
  | 13 -> TOKEN_RBRACK 
  | 14 -> TOKEN_LCURLY 
  | 15 -> TOKEN_RCURLY 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_SCHEME 
  | 18 -> TOKEN_CLASS 
  | 19 -> TOKEN_TYPE 
  | 20 -> TOKEN_VALUE 
  | 21 -> TOKEN_TEST_CASE 
  | 22 -> TOKEN_END 
  | 23 -> TOKEN_COLON 
  | 24 -> TOKEN_EQUALS 
  | 25 -> TOKEN_IDENT 
  | 26 -> TOKEN_STRING_LITERAL 
  | 27 -> TOKEN_LIT_UNIT 
  | 28 -> TOKEN_LIT_FLOAT 
  | 29 -> TOKEN_LIT_INT 
  | 30 -> TOKEN_LIT_BOOL 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_scheme 
    | 3 -> NONTERM_classes 
    | 4 -> NONTERM_classes 
    | 5 -> NONTERM_classDef 
    | 6 -> NONTERM_classDef 
    | 7 -> NONTERM_typeDefs 
    | 8 -> NONTERM_typeDefList 
    | 9 -> NONTERM_typeDefList 
    | 10 -> NONTERM_typeDef 
    | 11 -> NONTERM_valueDefs 
    | 12 -> NONTERM_valueDefList 
    | 13 -> NONTERM_valueDefList 
    | 14 -> NONTERM_valueDef 
    | 15 -> NONTERM_simpleExpr 
    | 16 -> NONTERM_simpleExpr 
    | 17 -> NONTERM_simpleExpr 
    | 18 -> NONTERM_simpleExpr 
    | 19 -> NONTERM_simpleExpr 
    | 20 -> NONTERM_setExprs 
    | 21 -> NONTERM_setExprs 
    | 22 -> NONTERM_setExpr 
    | 23 -> NONTERM_bodyExpr 
    | 24 -> NONTERM_bodyExpr 
    | 25 -> NONTERM_parenExprCommaSeq 
    | 26 -> NONTERM_parenExprCommaSeq 
    | 27 -> NONTERM_parenExprCommaSeq 
    | 28 -> NONTERM_exprCommaSeq 
    | 29 -> NONTERM_exprCommaSeq 
    | 30 -> NONTERM_parenArgProductSeq 
    | 31 -> NONTERM_parenArgProductSeq 
    | 32 -> NONTERM_argTypesSeq 
    | 33 -> NONTERM_argTypesSeq 
    | 34 -> NONTERM_functionExpr 
    | 35 -> NONTERM_primary 
    | 36 -> NONTERM_primary 
    | 37 -> NONTERM_variable 
    | 38 -> NONTERM_value 
    | 39 -> NONTERM_value 
    | 40 -> NONTERM_value 
    | 41 -> NONTERM_value 
    | 42 -> NONTERM_value 
    | 43 -> NONTERM_ident 
    | 44 -> NONTERM_pretype 
    | 45 -> NONTERM_pretype 
    | 46 -> NONTERM_pretype 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | SET  -> "SET" 
  | MINUS  -> "MINUS" 
  | RARROW  -> "RARROW" 
  | IS  -> "IS" 
  | UNION  -> "UNION" 
  | PRODUCT  -> "PRODUCT" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EOF  -> "EOF" 
  | SCHEME  -> "SCHEME" 
  | CLASS  -> "CLASS" 
  | TYPE  -> "TYPE" 
  | VALUE  -> "VALUE" 
  | TEST_CASE  -> "TEST_CASE" 
  | END  -> "END" 
  | COLON  -> "COLON" 
  | EQUALS  -> "EQUALS" 
  | IDENT _ -> "IDENT" 
  | STRING_LITERAL _ -> "STRING_LITERAL" 
  | LIT_UNIT _ -> "LIT_UNIT" 
  | LIT_FLOAT _ -> "LIT_FLOAT" 
  | LIT_INT _ -> "LIT_INT" 
  | LIT_BOOL _ -> "LIT_BOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | UNION  -> (null : System.Object) 
  | PRODUCT  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SCHEME  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | VALUE  -> (null : System.Object) 
  | TEST_CASE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_UNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIT_BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;2us;3us;2us;65535us;6us;7us;10us;11us;1us;65535us;8us;9us;2us;65535us;8us;12us;14us;15us;2us;65535us;16us;17us;19us;20us;2us;65535us;16us;18us;19us;18us;2us;65535us;8us;14us;12us;13us;2us;65535us;24us;25us;27us;28us;2us;65535us;24us;26us;27us;26us;7us;65535us;24us;29us;27us;29us;39us;35us;42us;36us;48us;37us;49us;38us;54us;38us;2us;65535us;32us;33us;45us;46us;2us;65535us;32us;44us;45us;44us;1us;65535us;42us;43us;1us;65535us;30us;31us;2us;65535us;49us;52us;54us;55us;5us;65535us;22us;63us;41us;63us;56us;63us;61us;63us;64us;63us;2us;65535us;56us;58us;61us;62us;5us;65535us;22us;75us;41us;75us;56us;75us;61us;75us;64us;75us;9us;65535us;24us;30us;27us;30us;32us;47us;39us;30us;42us;30us;45us;47us;48us;30us;49us;30us;54us;30us;11us;65535us;16us;21us;19us;21us;24us;40us;27us;40us;32us;67us;39us;40us;42us;40us;45us;67us;48us;40us;49us;40us;54us;40us;9us;65535us;24us;66us;27us;66us;32us;66us;39us;66us;42us;66us;45us;66us;48us;66us;49us;66us;54us;66us;17us;65535us;2us;5us;16us;68us;19us;68us;22us;76us;24us;68us;27us;68us;32us;68us;39us;68us;41us;76us;42us;68us;45us;68us;48us;68us;49us;68us;54us;68us;56us;76us;61us;76us;64us;76us;5us;65535us;22us;23us;41us;42us;56us;60us;61us;60us;64us;65us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;10us;13us;16us;19us;22us;25us;28us;36us;39us;42us;44us;46us;49us;55us;58us;64us;74us;86us;96us;114us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;1us;1us;2us;1us;2us;1us;2us;2us;3us;4us;2us;3us;4us;2us;3us;4us;1us;3us;1us;5us;1us;5us;1us;6us;1us;6us;1us;7us;1us;7us;2us;8us;9us;1us;8us;1us;8us;1us;10us;1us;10us;2us;10us;46us;1us;11us;1us;11us;2us;12us;13us;1us;12us;1us;12us;2us;14us;17us;2us;15us;19us;1us;15us;1us;16us;1us;16us;1us;16us;2us;17us;17us;3us;17us;23us;24us;2us;17us;23us;3us;17us;28us;29us;1us;17us;2us;18us;36us;1us;18us;2us;18us;46us;1us;18us;2us;20us;21us;1us;20us;1us;20us;1us;22us;1us;23us;2us;25us;27us;1us;25us;1us;26us;1us;27us;1us;27us;1us;28us;1us;28us;2us;30us;31us;1us;30us;1us;31us;1us;31us;3us;32us;33us;46us;1us;32us;1us;32us;1us;34us;1us;34us;2us;34us;46us;1us;35us;1us;36us;1us;37us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;1us;43us;1us;44us;1us;45us;1us;46us;1us;46us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;19us;22us;25us;27us;29us;31us;33us;35us;37us;39us;42us;44us;46us;48us;50us;53us;55us;57us;60us;62us;64us;67us;70us;72us;74us;76us;78us;81us;85us;88us;92us;94us;97us;99us;102us;104us;107us;109us;111us;113us;115us;118us;120us;122us;124us;126us;128us;130us;133us;135us;137us;139us;143us;145us;147us;149us;151us;154us;156us;158us;160us;162us;164us;166us;168us;170us;172us;174us;176us;178us;|]
let _fsyacc_action_rows = 79
let _fsyacc_actionTableElements = [|1us;32768us;17us;2us;0us;49152us;1us;32768us;25us;74us;1us;32768us;16us;4us;0us;16385us;1us;32768us;24us;6us;1us;32768us;18us;8us;0us;16386us;2us;32768us;19us;16us;20us;24us;1us;32768us;22us;10us;1us;16388us;18us;8us;0us;16387us;1us;32768us;20us;24us;0us;16389us;1us;32768us;19us;16us;0us;16390us;1us;32768us;25us;74us;0us;16391us;1us;16393us;9us;19us;1us;32768us;25us;74us;0us;16392us;1us;32768us;24us;22us;2us;32768us;10us;56us;25us;74us;1us;16394us;3us;77us;7us;32768us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;0us;16395us;1us;16397us;9us;27us;7us;32768us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;0us;16396us;1us;16398us;6us;39us;2us;16403us;10us;49us;27us;51us;0us;16399us;6us;32768us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;1us;32768us;15us;34us;0us;16400us;1us;16401us;6us;39us;2us;16408us;5us;48us;6us;39us;1us;16407us;6us;39us;2us;16413us;6us;39us;9us;54us;7us;32768us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;1us;16420us;23us;41us;2us;32768us;10us;56us;25us;74us;8us;32768us;3us;77us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;0us;16402us;1us;16405us;9us;45us;6us;32768us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;0us;16404us;0us;16406us;7us;32768us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;8us;32768us;11us;50us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;0us;16409us;0us;16410us;1us;32768us;11us;53us;0us;16411us;7us;32768us;14us;32us;25us;74us;26us;72us;27us;73us;28us;71us;29us;70us;30us;69us;0us;16412us;3us;32768us;10us;56us;11us;57us;25us;74us;0us;16414us;1us;32768us;11us;59us;0us;16415us;2us;16417us;3us;77us;7us;61us;2us;32768us;10us;56us;25us;74us;0us;16416us;1us;32768us;4us;64us;2us;32768us;10us;56us;25us;74us;1us;16418us;3us;77us;0us;16419us;0us;16420us;0us;16421us;0us;16422us;0us;16423us;0us;16424us;0us;16425us;0us;16426us;0us;16427us;0us;16428us;0us;16429us;1us;32768us;2us;78us;0us;16430us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;7us;8us;10us;12us;13us;16us;18us;20us;21us;23us;24us;26us;27us;29us;30us;32us;34us;35us;37us;40us;42us;50us;51us;53us;61us;62us;64us;67us;68us;75us;77us;78us;80us;83us;85us;88us;96us;98us;101us;110us;111us;113us;120us;121us;122us;130us;139us;140us;141us;143us;144us;152us;153us;157us;158us;160us;161us;164us;167us;168us;170us;173us;175us;176us;177us;178us;179us;180us;181us;182us;183us;184us;185us;186us;188us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;3us;4us;3us;2us;2us;2us;3us;1us;3us;2us;3us;1us;1us;2us;3us;3us;4us;1us;3us;1us;1us;3us;1us;2us;1us;3us;3us;1us;2us;3us;3us;1us;3us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;3us;4us;4us;5us;6us;6us;7us;8us;9us;9us;10us;11us;11us;11us;11us;11us;12us;12us;13us;14us;14us;15us;15us;15us;16us;16us;17us;17us;18us;18us;19us;20us;20us;21us;22us;22us;22us;22us;22us;23us;24us;24us;24us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;16387us;65535us;16389us;65535us;16390us;65535us;16391us;65535us;65535us;16392us;65535us;65535us;65535us;65535us;16395us;65535us;65535us;16396us;65535us;65535us;16399us;65535us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;16404us;16406us;65535us;65535us;16409us;16410us;65535us;16411us;65535us;16412us;65535us;16414us;65535us;16415us;65535us;65535us;16416us;65535us;65535us;65535us;16419us;16420us;16421us;16422us;16423us;16424us;16425us;16426us;16427us;16428us;16429us;65535us;16430us;|]
let _fsyacc_reductions = lazy [|
# 343 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.UntypedAST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 352 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_scheme in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "src/Parser.fsy"
                                               _2 
                   )
# 54 "src/Parser.fsy"
                 : AST.UntypedAST));
# 363 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            let _3 = parseState.GetInput(3) :?> 'gentype_classes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "src/Parser.fsy"
                                                  mkNode(parseState, 2, Expr.Scheme(_1, _3)) 
                   )
# 57 "src/Parser.fsy"
                 : 'gentype_scheme));
# 375 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_classDef in
            let _4 = parseState.GetInput(4) :?> 'gentype_classes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "src/Parser.fsy"
                                                        _2 :: _4 
                   )
# 61 "src/Parser.fsy"
                 : 'gentype_classes));
# 387 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_classDef in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "src/Parser.fsy"
                                                [_2] 
                   )
# 62 "src/Parser.fsy"
                 : 'gentype_classes));
# 398 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_typeDefs in
            let _2 = parseState.GetInput(2) :?> 'gentype_valueDefs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "src/Parser.fsy"
                                                mkNode(parseState, 1, Expr.ClassDef("", _1, _2)) 
                   )
# 67 "src/Parser.fsy"
                 : 'gentype_classDef));
# 410 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_valueDefs in
            let _2 = parseState.GetInput(2) :?> 'gentype_typeDefs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "src/Parser.fsy"
                                                mkNode(parseState, 1, Expr.ClassDef("", _2, _1)) 
                   )
# 68 "src/Parser.fsy"
                 : 'gentype_classDef));
# 422 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_typeDefList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "src/Parser.fsy"
                                              _2 
                   )
# 71 "src/Parser.fsy"
                 : 'gentype_typeDefs));
# 433 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_typeDef in
            let _3 = parseState.GetInput(3) :?> 'gentype_typeDefList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "src/Parser.fsy"
                                                       _1 :: _3 
                   )
# 74 "src/Parser.fsy"
                 : 'gentype_typeDefList));
# 445 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_typeDef in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "src/Parser.fsy"
                                     [_1] 
                   )
# 75 "src/Parser.fsy"
                 : 'gentype_typeDefList));
# 456 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "src/Parser.fsy"
                                                     mkNode(parseState, 2, (Expr.TypeDef(_1, _3))) 
                   )
# 78 "src/Parser.fsy"
                 : 'gentype_typeDef));
# 468 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_valueDefList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "src/Parser.fsy"
                                                _2 
                   )
# 81 "src/Parser.fsy"
                 : 'gentype_valueDefs));
# 479 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_valueDef in
            let _3 = parseState.GetInput(3) :?> 'gentype_valueDefList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "src/Parser.fsy"
                                                         _1 :: _3 
                   )
# 84 "src/Parser.fsy"
                 : 'gentype_valueDefList));
# 491 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_valueDef in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "src/Parser.fsy"
                                      [_1] 
                   )
# 85 "src/Parser.fsy"
                 : 'gentype_valueDefList));
# 502 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "src/Parser.fsy"
                                        mkNode(parseState, 1, Expr.ValueDef(_1)) 
                   )
# 88 "src/Parser.fsy"
                 : 'gentype_valueDef));
# 513 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            let _2 = parseState.GetInput(2) :?> 'gentype_parenExprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "src/Parser.fsy"
                                                       mkNode(parseState, 1, Expr.Application(_1, _2)) 
                   )
# 95 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 525 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_setExprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "src/Parser.fsy"
                                                    mkNode(parseState, 2, Expr.SetDef(_2)) 
                   )
# 96 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 536 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "src/Parser.fsy"
                                                         mkNode(parseState, 2, Expr.UnionDef(_1, _3)) 
                   )
# 97 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 548 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            let _4 = parseState.GetInput(4) :?> 'gentype_bodyExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "src/Parser.fsy"
                                                             mkNode(parseState, 2, Expr.Assign(_1, _3, _4)) 
                   )
# 98 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 561 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "src/Parser.fsy"
                                     _1 
                   )
# 99 "src/Parser.fsy"
                 : 'gentype_simpleExpr));
# 572 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_setExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_setExprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "src/Parser.fsy"
                                                    _1 :: _3 
                   )
# 104 "src/Parser.fsy"
                 : 'gentype_setExprs));
# 584 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_setExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "src/Parser.fsy"
                                     [_1] 
                   )
# 105 "src/Parser.fsy"
                 : 'gentype_setExprs));
# 595 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "src/Parser.fsy"
                                     _1 
                   )
# 108 "src/Parser.fsy"
                 : 'gentype_setExpr));
# 606 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "src/Parser.fsy"
                                                      mkNode(parseState, 1, Expr.IsEqual(_1, _3)) 
                   )
# 111 "src/Parser.fsy"
                 : 'gentype_bodyExpr));
# 618 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "src/Parser.fsy"
                                        _1 
                   )
# 112 "src/Parser.fsy"
                 : 'gentype_bodyExpr));
# 629 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "src/Parser.fsy"
                                                      [] 
                   )
# 116 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 639 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "src/Parser.fsy"
                                                   [] 
                   )
# 117 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 650 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "src/Parser.fsy"
                                                       _2 
                   )
# 118 "src/Parser.fsy"
                 : 'gentype_parenExprCommaSeq));
# 661 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_exprCommaSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "src/Parser.fsy"
                                                          _1 :: _3 
                   )
# 122 "src/Parser.fsy"
                 : 'gentype_exprCommaSeq));
# 673 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpleExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "src/Parser.fsy"
                                                          [_1] 
                   )
# 123 "src/Parser.fsy"
                 : 'gentype_exprCommaSeq));
# 684 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "src/Parser.fsy"
                                           [] 
                   )
# 126 "src/Parser.fsy"
                 : 'gentype_parenArgProductSeq));
# 694 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_argTypesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "src/Parser.fsy"
                                                       _2 
                   )
# 127 "src/Parser.fsy"
                 : 'gentype_parenArgProductSeq));
# 705 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            let _3 = parseState.GetInput(3) :?> 'gentype_argTypesSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "src/Parser.fsy"
                                                          _1 :: _3 
                   )
# 130 "src/Parser.fsy"
                 : 'gentype_argTypesSeq));
# 717 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "src/Parser.fsy"
                                                        [_1] 
                   )
# 131 "src/Parser.fsy"
                 : 'gentype_argTypesSeq));
# 728 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parenArgProductSeq in
            let _3 = parseState.GetInput(3) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "src/Parser.fsy"
                                                               mkPretypeNode(parseState, 2, Pretype.TFun(_1, _3)) 
                   )
# 134 "src/Parser.fsy"
                 : 'gentype_functionExpr));
# 740 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "src/Parser.fsy"
                                         _1 
                   )
# 137 "src/Parser.fsy"
                 : 'gentype_primary));
# 751 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "src/Parser.fsy"
                                         mkNode(parseState, 1, Expr.Var(_1)) 
                   )
# 138 "src/Parser.fsy"
                 : 'gentype_primary));
# 762 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "src/Parser.fsy"
                                       _1 
                   )
# 141 "src/Parser.fsy"
                 : 'gentype_variable));
# 773 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.BoolVal(_1)) 
                   )
# 145 "src/Parser.fsy"
                 : 'gentype_value));
# 784 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.IntVal(_1)) 
                   )
# 146 "src/Parser.fsy"
                 : 'gentype_value));
# 795 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> single in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.FloatVal(_1)) 
                   )
# 147 "src/Parser.fsy"
                 : 'gentype_value));
# 806 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "src/Parser.fsy"
                                           mkNode(parseState, 1, Expr.StringVal(_1.[1..^1])) 
                   )
# 148 "src/Parser.fsy"
                 : 'gentype_value));
# 817 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "src/Parser.fsy"
                                       mkNode(parseState, 1, Expr.UnitVal) 
                   )
# 149 "src/Parser.fsy"
                 : 'gentype_value));
# 828 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "src/Parser.fsy"
                                   _1 
                   )
# 152 "src/Parser.fsy"
                 : 'gentype_ident));
# 839 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_functionExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "src/Parser.fsy"
                                          _1 
                   )
# 155 "src/Parser.fsy"
                 : 'gentype_pretype));
# 850 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ident in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "src/Parser.fsy"
                                   mkPretypeNode(parseState, 1, Pretype.TId(_1)) 
                   )
# 156 "src/Parser.fsy"
                 : 'gentype_pretype));
# 861 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pretype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "src/Parser.fsy"
                                               mkPretypeNode(parseState, 3, Pretype.TSet(_1)) 
                   )
# 157 "src/Parser.fsy"
                 : 'gentype_pretype));
|]
# 873 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let program lexer lexbuf : AST.UntypedAST =
    engine lexer lexbuf 0 :?> _
