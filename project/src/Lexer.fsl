{
// open FsLexYacc.Runtime
// The lexer's input buffer type (just a shorthand type alias used below).
type LexBuffer<'a> = FSharp.Text.Lexing.LexBuffer<'a>

// Auxiliary function to update the token stream position to the next line.
let skipline (lexbuf: LexBuffer<_>) =
  // Compute the next line position
  let newPos = lexbuf.EndPos.NextLine
  // Update the token stream position, marking the beginning of line position
  // (pos_bol) at the current total number of scanned characters (pos_cnum)
  lexbuf.EndPos <- { newPos with pos_bol = newPos.pos_cnum }

}

let digit = ['0'-'9']
let letter = ['a'-'z' 'A'-'Z']
let ident = letter (letter | digit | '_')*
let whitespace = [' ' '\t' '\r']
let newline    = '\n'

let litUnit    = "()"
let litBool    = "true" | "false"
let litInt     = digit+
// let litFloat   = digit+ '.' digit+ (('e'|'E') ('+'|'-')? digit+)? 'f'
let litFloat = ['-']?digit+['.']digit+ 
let stringLit = '"' ('\\' ['\\' '"'] | [^'"'])* '"'

rule tokenize = parse

| whitespace        { tokenize lexbuf }
| newline           { skipline lexbuf; tokenize lexbuf }
| "//" [^'\n''\r']* { tokenize lexbuf }

| litUnit           { Parser.LIT_UNIT() }
| litBool           { Parser.LIT_BOOL((LexBuffer<_>.LexemeString lexbuf) = "true") }
| litInt            { Parser.LIT_INT(int (LexBuffer<_>.LexemeString lexbuf)) }
// | litFloat          { Parser.LIT_FLOAT(single ((LexBuffer<_>.LexemeString lexbuf).Split [|'f'|]).[0]) }
| litFloat          { Parser.LIT_FLOAT(single (LexBuffer<_>.LexemeString lexbuf)) }
| stringLit         { Parser.STRING_LITERAL (LexBuffer<_>.LexemeString lexbuf) }

| "scheme"          { Parser.SCHEME }
| "class"           { Parser.CLASS }
| "type"            { Parser.TYPE }
| "value"           { Parser.VALUE }
| "let"            { Parser.LET }
| "in"             { Parser.IN }
| "if"              { Parser.IF }
| "then"            { Parser.THEN }
| "else"            { Parser.ELSE }
| "axiom"           { Parser.AXIOM }
| "test_case"       { Parser.TEST_CASE }
| "end"             { Parser.END }
// | "Text"            { Parser.TEXT }
| "Bool"            { Parser.BOOL }
| "Int"            { Parser.INT }
// | "Nat"            { Parser.NAT }
// | "Real"            { Parser.REAL }
// | "Unit"            { Parser.UNIT }
| "-set"             { Parser.SET }
| "-infset"             { Parser.INFSET }
| "-list"             { Parser.LIST }
| "-inflist"             { Parser.INFLIST }
| "is"              { Parser.IS }
| "union"           { Parser.UNION }
| "\\/"              { Parser.OR }
| "/\\"             { Parser.AND }
| "inter"           { Parser.INTERSECTION }
| "isin"            { Parser.BELONGS }
| "~isin"            { Parser.NOT_BELONGS }
| "exists"          { Parser.EXISTS }
| "abs"            { Parser.ABS }
| "|"              { Parser.CHOICE }
| "all"          { Parser.FORALL }
| "<<"            { Parser.LSUBSET }
| "<<="            { Parser.LSUBSET_EQUALS }
| ">>"            { Parser.RSUBSET }
| ">>="            { Parser.RSUBSET_EQUALS }
| "<="              { Parser.LEQ }
| ">="              { Parser.GEQ }
| ">"               { Parser.GT }
| "<"               { Parser.LT }
| "><"              { Parser.PRODUCT }
| "->"              { Parser.RARROW }
| "-~->"            { Parser.PARTIAL_RARROW }
| "=>"             { Parser.IMPLIES }
| "-"               { Parser.MINUS }
| "+"               { Parser.PLUS }
| "*"               { Parser.MULTIPLY }
| "/"               { Parser.DIVIDE }
| "**"              { Parser.EXPONENT }
| "="               { Parser.EQUALS }
| "~="              { Parser.NOT_EQUALS }
| ":-"               { Parser.DOT }
| ":"               { Parser.COLON }
| ";"               { Parser.SEMICOLON }
| ","               { Parser.COMMA }
| "("               { Parser.LPAREN }
| ")"               { Parser.RPAREN }
| "{"               { Parser.LCURLY }
| "}"               { Parser.RCURLY }
| "["               { Parser.LBRACK }
| "]"               { Parser.RBRACK }
| "~"               { Parser.NOT }


| ident             { Parser.IDENT (LexBuffer<_>.LexemeString lexbuf) }

| eof               { Parser.EOF }
