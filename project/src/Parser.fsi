// Signature file for parser generated by fsyacc
module Parser
type token = 
  | GT
  | LT
  | SET
  | MINUS
  | RARROW
  | IS
  | UNION
  | PRODUCT
  | SEMICOLON
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | EOF
  | SCHEME
  | CLASS
  | TYPE
  | VALUE
  | TEST_CASE
  | END
  | COLON
  | EQUALS
  | IDENT of (string)
  | STRING_LITERAL of (string)
  | LIT_UNIT of (unit)
  | LIT_FLOAT of (single)
  | LIT_INT of (int)
  | LIT_BOOL of (bool)
type tokenId = 
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_SET
    | TOKEN_MINUS
    | TOKEN_RARROW
    | TOKEN_IS
    | TOKEN_UNION
    | TOKEN_PRODUCT
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EOF
    | TOKEN_SCHEME
    | TOKEN_CLASS
    | TOKEN_TYPE
    | TOKEN_VALUE
    | TOKEN_TEST_CASE
    | TOKEN_END
    | TOKEN_COLON
    | TOKEN_EQUALS
    | TOKEN_IDENT
    | TOKEN_STRING_LITERAL
    | TOKEN_LIT_UNIT
    | TOKEN_LIT_FLOAT
    | TOKEN_LIT_INT
    | TOKEN_LIT_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_scheme
    | NONTERM_classes
    | NONTERM_classDef
    | NONTERM_typeDefs
    | NONTERM_typeDefList
    | NONTERM_typeDef
    | NONTERM_valueDefs
    | NONTERM_valueDefList
    | NONTERM_valueDef
    | NONTERM_simpleExpr
    | NONTERM_setExprs
    | NONTERM_setExpr
    | NONTERM_bodyExpr
    | NONTERM_parenExprCommaSeq
    | NONTERM_exprCommaSeq
    | NONTERM_parenArgProductSeq
    | NONTERM_argTypesSeq
    | NONTERM_functionExpr
    | NONTERM_primary
    | NONTERM_variable
    | NONTERM_value
    | NONTERM_ident
    | NONTERM_pretype
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val program : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.UntypedAST) 
