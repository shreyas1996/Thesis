%{
open FSharp.Text.Parsing
open AST

// Auxiliary function to compute the position an AST node
let pos (parseState: IParseState, inputIdx: int): AST.Position =
  let mainPos = parseState.InputStartPosition inputIdx
  let (rstart, rend) = parseState.ResultRange
  { FileName = mainPos.FileName
    Line = mainPos.pos_lnum + 1 // Line numbering from 1
    Col = mainPos.pos_cnum - mainPos.pos_bol + 1 // Line numbering from 1
    LineStart = rstart.pos_lnum + 1 // Row numbering from 1
    ColStart = rstart.pos_cnum - rstart.pos_bol + 1 // Column numbering from 1
    LineEnd = rend.pos_lnum + 1
    ColEnd = rend.pos_cnum - rend.pos_bol } // No +1: cover last-used character

// Auxiliary function to build an untyped AST node for a Hygge expression.
// 'inputIdx' is the index of the symbol to use for computing the position of
// this expression (it will be used e.g. when reporting error messages).
let mkNode (parseState: IParseState, inputIdx: int, node: 'C): AST.Node<'C> =
    { Pos = pos(parseState, inputIdx) ; NodeCategory = node }

%}

%start program
%type <AST.Node<AST.SchemeDecl>> program
// Define constants
%token <bool> LIT_BOOL
%token <int> LIT_INT
%token <single> LIT_FLOAT
%token <unit> LIT_UNIT
%token <string> STRING_LITERAL

%token <string> IDENT
%token BOOL INT

%token SCHEME CLASS TYPE VALUE LET IN IF THEN ELSE AXIOM TEST_CASE END EOF ABS
%token AND OR NOT
%token SEMICOLON COLON COMMA LPAREN RPAREN LBRACK RBRACK LCURLY RCURLY
%token RARROW PARTIAL_RARROW IMPLIES LSUBSET RSUBSET LSUBSET_EQUALS RSUBSET_EQUALS
%token SET INFSET LIST INFLIST DOT
%token IS UNION PRODUCT INTERSECTION BELONGS NOT_BELONGS EXISTS CHOICE FORALL

%token EQUALS NOT_EQUALS GT LT GEQ LEQ
%token PLUS MINUS
%token MULTIPLY DIVIDE
%token EXPONENT

%right FORALL EXISTS
%right IMPLIES
%right OR
%right AND
%left EQUALS NOT_EQUALS GT LT GEQ LEQ
%left PLUS MINUS
%left MULTIPLY DIVIDE

%%

program:
    | SCHEME schemeDef EOF 
        { 

            mkNode(parseState, 1, {
                schemeDef = $2;
            })

        }

schemeDef:
    | ident EQUALS classExpr 
        {
            mkNode(parseState, 1, {
                name = $1;
                classExpr = $3;
            })
        
        }

classExpr:
    | CLASS optDeclStringExpr END 
        { 
            mkNode(parseState, 1,{
                optDecl = $2;
            })
        
        }

optDeclStringExpr:
    | declExprList { $1 }

declExprList:
    | declExpr declExprList { $1 :: $2 }
    | declExpr { [$1] }

declExpr:
    | typeDecl { Decl.TypeDecl($1) }
    | valueDecl { Decl.ValueDecl($1) }
    | axiomDecl { Decl.AxiomDecl($1) }

typeDecl:
    | TYPE typeDefList
        { 
            (mkNode(parseState, 1, {
                typeDefList = $2
            }))
        
        }

typeDefList:
    | typeDef COMMA typeDefList { $1 :: $3 }
    | typeDef { [$1] }

typeDef:
    | sortDefExpr { TypeDef.SortDef($1) }
    | variantDefExpr { TypeDef.VariantDef($1) }
    | abbrevDefExpr { TypeDef.AbbrevDef($1) }

sortDefExpr:
    | ident
        {
            mkNode(parseState, 1, {
                name = $1;
            })
        
        }

variantDefExpr:
    | ident EQUALS EQUALS identChoice
        {
            mkNode(parseState, 1,{
                name = $1;
                choice = $4;
            })
        
        
        }

identChoice:
    | IDENT CHOICE identChoice { $1 :: $3 }
    | IDENT { [$1] }

abbrevDefExpr:
    | ident EQUALS typeExpr
        {
            mkNode(parseState, 1,{
                name = $1;
                typeExpr = $3;
            })
        
        }

valueDecl:
    | VALUE valueDefList
        {
            (mkNode(parseState, 1,{
                valueDefList = $2
            }))
        
        }

valueDefList:
    | valueDef COMMA valueDefList { $1 :: $3 }
    | valueDef { [$1] }

valueDef:
    | explicitValueDef { ValueDef.ExplicitValueDef($1) }
    | explicitFunctionDef { ValueDef.ExplicitFunctionDef($1) }
    | valueSignatureExpr { ValueDef.ValueSignature($1) }

valueSignatureExpr:
    | ident COLON typeExpr
        {
            mkNode(parseState, 1,{
                name = $1;
                typeExpr = $3;
            })
        
        }

explicitValueDef:
    | ident COLON typeExpr EQUALS valueExpr
        {
            mkNode(parseState, 1,{
                name = $1;
                typeExpr = $3;
                valueExpr = $5;
            })
        
        }

explicitFunctionDef:
    | ident COLON typeExprProduct functionDeclOp typeExpr explicitFunctionBodyExpr
        {
            mkNode(parseState, 1,{
                name = $1;
                args = $3;
                functionDeclOperator = $4;
                returnTypeExpr = $5;
                bodyExpr = $6;
            })
        
        }

functionDeclOp:
    | PARTIAL_RARROW { FunctionDeclOperator.PartialArrow }
    | RARROW { FunctionDeclOperator.Arrow }

explicitFunctionBodyExpr:
    | ident LPAREN identList RPAREN functionDefOp valueExpr
        {
            mkNode(parseState, 1,{
                name = $1;
                args = $3;
                functionDefOperator = $5;
                valueExpr = $6;
            })
        
        }

functionDefOp:
    | IS { FunctionDefOperator.Is }

identList:
    | ident COMMA identList { $1 :: $3 }
    | ident { [$1] }
    | { [] }

axiomDecl:
    | AXIOM axiomDefList
        {
            (mkNode(parseState, 1,{
                axiomDefList = $2
            }))
        
        }
    

axiomDefList:
    | axiomDef COMMA axiomDefList { $1 :: $3 }
    | axiomDef { [$1] }

axiomDef:
    | optionAxiomName valueExpr
        {
            mkNode(parseState, 1,{
                name = $1;
                logicalValueExpr = $2;
            })
        
        }
    | valueExpr
        {
            mkNode(parseState, 1,{
                name = "";
                logicalValueExpr = $1;
            })
        
        }

optionAxiomName:
    | LBRACK ident RBRACK { $2 }

typeExpr:
    | typeLiteralExpr { mkNode(parseState, 1, TypeExpr.TypeLiteral($1)) }
    | typeNameExpr { mkNode(parseState, 1, TypeExpr.TypeName($1)) }
    | subtypeExpr { mkNode(parseState, 1, TypeExpr.SubtypeExpr($1)) }
    | bracketedTypeExpr { mkNode(parseState, 1, TypeExpr.BracketedTypeExpr($1)) }

typeLiteralExpr:
    | BOOL { mkNode(parseState, 1, TypeLiteral.Bool) }
    | INT { mkNode(parseState, 1, TypeLiteral.Int) }

typeNameExpr:
    | ident 
        { 
            mkNode(parseState, 1,{
                name = $1;
            })
        }

subtypeExpr:
    | LCURLY CHOICE singleTypingExpr DOT valueExpr CHOICE RCURLY
        {
            mkNode(parseState, 1,{
                singleTyping = $3;
                valueExpr = $5;
            })
        
        }

singleTypingExpr:
    | ident COLON typeExpr 
        { 
            mkNode(parseState, 1,{
                name = $1;
                typeExpr = $3;
            })
        }

bracketedTypeExpr:
    | LPAREN typeExpr RPAREN 
        {
            mkNode(parseState, 1,{
                typeExpr = $2;
            })
        }

typeExprProduct:
    | typeExpr PRODUCT typeExprProduct { $1 :: $3 }
    | typeExpr { [$1] }

valueExpr:
    | quantifiedExpr { mkNode(parseState, 1,ValueExpr.QuantifiedExpr($1)) }
    | valueExpr_9 { $1 }

quantifiedExpr:
    | quantifiedOp singleTypingExprList DOT valueExpr 
        {
            mkNode(parseState, 1,{
                quantifier = $1;
                singleTypingList = $2;
                valueExpr = $4;
            })
        }

quantifiedOp:
    | EXISTS { Quantifiers.Exists }
    | FORALL { Quantifiers.Forall }

singleTypingExprList:
    | singleTypingExpr COMMA singleTypingExprList { $1 :: $3 }
    | singleTypingExpr { [$1] }

valueExpr_9:
    | impliesExpr { mkNode(parseState, 1,ValueExpr.AxiomInfixExpr($1))}
    | valueExpr_8 { $1 }


impliesExpr:
    | valueExpr_8 IMPLIES valueExpr_9 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixConnective = InfixConnective.Implies;
                rightExpr = $3;
            })
        }

valueExpr_8:
    | orExpr { mkNode(parseState, 1,ValueExpr.AxiomInfixExpr($1)) }
    | valueExpr_7 { $1 }

orExpr:
    | valueExpr_7 OR valueExpr_8 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixConnective = InfixConnective.Or;
                rightExpr = $3;
            })
        }

valueExpr_7:
    | andExpr { mkNode(parseState, 1,ValueExpr.AxiomInfixExpr($1)) }
    | valueExpr_6 { $1 }

andExpr:
    | valueExpr_6 AND valueExpr_7 
        {
           mkNode(parseState, 2,{
                leftExpr = $1;
                infixConnective = InfixConnective.And;
                rightExpr = $3;
            })
        }

valueExpr_6:
    | relExpr { mkNode(parseState, 1,ValueExpr.ValueInfixExpr($1)) }
    | valueExpr_5 { $1 }

relExpr:
    | valueExpr_5 relOp valueExpr_6 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixOperator = $2;
                rightExpr = $3;
            })
        }

relOp:
    | EQUALS { InfixOperator.Equals }
    | NOT_EQUALS { InfixOperator.NotEquals }
    | GT { InfixOperator.GreaterThan }
    | LT { InfixOperator.LessThan }
    | GEQ { InfixOperator.GreaterOrEqual }
    | LEQ { InfixOperator.LessOrEqual }

valueExpr_5:
    | addExpr { mkNode(parseState, 1,ValueExpr.ValueInfixExpr($1)) }
    | valueExpr_4 { $1 }

addExpr:
    | valueExpr_4 PLUS valueExpr_5 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixOperator = InfixOperator.Add;
                rightExpr = $3;
            })
        }
    | valueExpr_4 MINUS valueExpr_5 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixOperator = InfixOperator.Subtract;
                rightExpr = $3;
            })
        }

valueExpr_4:
    | mulExpr { mkNode(parseState, 1,ValueExpr.ValueInfixExpr($1)) }
    | valueExpr_3 { $1 }

mulExpr:
    | valueExpr_3 MULTIPLY valueExpr_4 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixOperator = InfixOperator.Multiply;
                rightExpr = $3;
            })
        }
    | valueExpr_3 DIVIDE valueExpr_4 
        {
            mkNode(parseState, 2,{
                leftExpr = $1;
                infixOperator = InfixOperator.Divide;
                rightExpr = $3;
            })
        }

valueExpr_3:
    | axiomPrefixExpr { mkNode(parseState, 1,ValueExpr.AxiomPrefixExpr($1)) }
    | valuePrefixExpr{ mkNode(parseState, 1,ValueExpr.ValuePrefixExpr($1)) }
    | valueExpr_2 { $1 }

axiomPrefixExpr:
    | prefixConnective valueExpr_3 
        {
            mkNode(parseState, 1,{
                prefixConnective = $1;
                valueExpr = $2;
            })
        }

prefixConnective:
    | NOT { PrefixConnective.Not }

valuePrefixExpr:
    | prefixOperator valueExpr_3 
        {
            mkNode(parseState, 1,{
                prefixOperator = $1;
                valueExpr = $2;
            })
        }

prefixOperator:
    | ABS { PrefixOperator.Abs }

valueExpr_2:
    | applicationExpr { mkNode(parseState, 1,ValueExpr.ApplicationExpr($1)) }
    | valueExpr_1 { $1 }

applicationExpr:
    | ident LPAREN valueExprList RPAREN 
        {
            mkNode(parseState, 1,{
                name = $1;
                args = $3;
            })
        }

valueExprList:
    | valueExpr COMMA valueExprList { $1 :: $3 }
    | valueExpr { [$1] }

valueExpr_1:
    | bracketedExpr { mkNode(parseState, 1,ValueExpr.BracketedExpr($1)) }
    | letExpr { mkNode(parseState, 1,ValueExpr.LetExpr($1)) }
    | ifExpr { mkNode(parseState, 1,ValueExpr.IfExpr($1)) }
    | valueNameExpr { mkNode(parseState, 1,ValueExpr.ValueName($1)) }
    | valueLiteralExpr { mkNode(parseState, 1,ValueExpr.ValueLiteral($1)) }

bracketedExpr:
    | LPAREN valueExpr RPAREN 
        {
            mkNode(parseState, 1,{
                valueExpr = $2;
            })
        }

letExpr:
    | LET ident EQUALS valueExpr IN valueExpr END 
        {
            mkNode(parseState, 1,{
                name = $2;
                initExpr = $4;
                scopeExpr = $6;
            })
        }

ifExpr:
    | IF valueExpr THEN valueExpr ELSE valueExpr END 
        {
            mkNode(parseState, 1,{
                condExpr = $2;
                thenExpr = $4;
                elseExpr = $6;
            })
        }

valueNameExpr:
    | ident { $1 }

valueLiteralExpr:
    | LIT_BOOL { mkNode(parseState, 1, ValueLiteral.Bool($1)) }
    | LIT_INT { mkNode(parseState, 1, ValueLiteral.Int($1)) }

ident:
    | IDENT { $1 }